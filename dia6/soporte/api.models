# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Answer(models.Model):
    description = models.TextField(blank=True, null=True)
    file = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, blank=True, null=True)
    person_id = models.IntegerField(blank=True, null=True)
    status = models.ForeignKey('Status', models.DO_NOTHING, blank=True, null=True)
    ticket = models.ForeignKey('Ticket', models.DO_NOTHING)
    kind = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'answer'


class Category(models.Model):
    name = models.CharField(max_length=200, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'category'


class History(models.Model):
    code = models.CharField(max_length=50, blank=True, null=True)
    date_at = models.DateField(blank=True, null=True)
    description = models.CharField(max_length=500, blank=True, null=True)
    status = models.ForeignKey('Status', models.DO_NOTHING, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, blank=True, null=True)
    asigned = models.ForeignKey('User', models.DO_NOTHING, related_name='history_asigned_set', blank=True, null=True)
    ticket = models.ForeignKey('Ticket', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'history'


class Kind(models.Model):
    name = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'kind'


class Notification(models.Model):
    description = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    author = models.ForeignKey('User', models.DO_NOTHING, blank=True, null=True)
    receptor = models.ForeignKey('User', models.DO_NOTHING, related_name='notification_receptor_set', blank=True, null=True)
    ticket = models.ForeignKey('Ticket', models.DO_NOTHING)
    status = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'notification'


class Person(models.Model):
    code = models.CharField(max_length=255, blank=True, null=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    lastname = models.CharField(max_length=255, blank=True, null=True)
    address = models.CharField(max_length=255, blank=True, null=True)
    email = models.CharField(max_length=255, blank=True, null=True)
    phone = models.CharField(max_length=255, blank=True, null=True)
    password = models.CharField(max_length=60, blank=True, null=True)
    image = models.CharField(max_length=255, blank=True, null=True)
    status = models.IntegerField(blank=True, null=True)
    kind = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'person'


class Priority(models.Model):
    name = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'priority'


class Project(models.Model):
    name = models.CharField(max_length=200, blank=True, null=True)
    description = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'project'


class Status(models.Model):
    name = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'status'


class Subkind(models.Model):
    name = models.CharField(max_length=100, blank=True, null=True)
    kind = models.ForeignKey(Kind, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'subkind'


class Ticket(models.Model):
    code = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=100, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    file = models.CharField(max_length=255, blank=True, null=True)
    file2 = models.CharField(max_length=255, blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    kind = models.ForeignKey(Kind, models.DO_NOTHING)
    subkind = models.ForeignKey(Subkind, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, blank=True, null=True)
    person = models.ForeignKey(Person, models.DO_NOTHING, blank=True, null=True)
    asigned = models.ForeignKey('User', models.DO_NOTHING, related_name='ticket_asigned_set', blank=True, null=True)
    project = models.ForeignKey(Project, models.DO_NOTHING, blank=True, null=True)
    category = models.ForeignKey(Category, models.DO_NOTHING, blank=True, null=True)
    priority = models.ForeignKey(Priority, models.DO_NOTHING)
    status = models.ForeignKey(Status, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'ticket'


class User(models.Model):
    username = models.CharField(max_length=50, blank=True, null=True)
    name = models.CharField(max_length=50, blank=True, null=True)
    lastname = models.CharField(max_length=50, blank=True, null=True)
    email = models.CharField(max_length=255, blank=True, null=True)
    password = models.CharField(max_length=60, blank=True, null=True)
    is_active = models.IntegerField()
    kind = models.IntegerField()
    created_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user'
